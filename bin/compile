#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# Write debug info to a file in the build dir
echo "-----> Debug: AppSignal buildpack compile script starting at $(date)" > "$1/appsignal-buildpack-compile.log"
echo "-----> Debug: Build dir is $1" >> "$1/appsignal-buildpack-compile.log"
echo "-----> Debug: Cache dir is $2" >> "$1/appsignal-buildpack-compile.log"
echo "-----> Debug: Env dir is $3" >> "$1/appsignal-buildpack-compile.log"
echo "-----> Debug: Current directory is $(pwd)" >> "$1/appsignal-buildpack-compile.log"
echo "-----> Debug: Environment variables:" >> "$1/appsignal-buildpack-compile.log"
env >> "$1/appsignal-buildpack-compile.log"

# Fail fast
set -e
set -o pipefail

# Debug
set -x

# Parse params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Set buildpack dir
BUILDPACK_DIR=$(cd "$(dirname "$0")"; cd ..; pwd)

# Set up cache directories
CACHE_APT_DIR="$CACHE_DIR/apt"
CACHE_GPG_DIR="$CACHE_DIR/gpg"
mkdir -p "$CACHE_APT_DIR" "$CACHE_GPG_DIR"

# Check for required environment variable
if [ ! -f "$ENV_DIR/APPSIGNAL_PUSH_API_KEY" ]; then
  echo "-----> Error: APPSIGNAL_PUSH_API_KEY environment variable is required"
  echo "      Please set it in your Heroku config vars"
  echo "      You can find your Push API key in the 'Push & Deploy' section of your AppSignal dashboard"
  exit 1
fi

# Read the API key from ENV_DIR
APPSIGNAL_PUSH_API_KEY=$(cat "$ENV_DIR/APPSIGNAL_PUSH_API_KEY")

echo "-----> Installing AppSignal collector"

# Install required packages
apt-get update
apt-get install -y curl gpg

# Create directory for GPG keys
mkdir -p /etc/apt/keyrings

# Check if we have cached GPG key
if [ -f "$CACHE_GPG_DIR/appsignal_collector-ubuntu-jammy-archive-keyring.gpg" ]; then
  echo "-----> Using cached GPG key"
  cp "$CACHE_GPG_DIR/appsignal_collector-ubuntu-jammy-archive-keyring.gpg" /etc/apt/keyrings/
else
  echo "-----> Downloading and caching GPG key"
  curl -fsSL "https://packages.buildkite.com/appsignal/collector-ubuntu-jammy/gpgkey" | gpg --dearmor -o /etc/apt/keyrings/appsignal_collector-ubuntu-jammy-archive-keyring.gpg
  cp /etc/apt/keyrings/appsignal_collector-ubuntu-jammy-archive-keyring.gpg "$CACHE_GPG_DIR/"
fi

# Check if we have cached repository configuration
if [ -f "$CACHE_APT_DIR/appsignal-collector.list" ]; then
  echo "-----> Using cached repository configuration"
  cp "$CACHE_APT_DIR/appsignal-collector.list" /etc/apt/sources.list.d/
else
  echo "-----> Creating and caching repository configuration"
  echo -e "deb [signed-by=/etc/apt/keyrings/appsignal_collector-ubuntu-jammy-archive-keyring.gpg] https://packages.buildkite.com/appsignal/collector-ubuntu-jammy/any/ any main\ndeb-src [signed-by=/etc/apt/keyrings/appsignal_collector-ubuntu-jammy-archive-keyring.gpg] https://packages.buildkite.com/appsignal/collector-ubuntu-jammy/any/ any main" > /etc/apt/sources.list.d/buildkite-appsignal-collector-ubuntu-jammy.list
  cp /etc/apt/sources.list.d/buildkite-appsignal-collector-ubuntu-jammy.list "$CACHE_APT_DIR/appsignal-collector.list"
fi

# Configure apt to use the cache directory
echo "-----> Configuring APT to use cache"
mkdir -p "$CACHE_APT_DIR/archives/partial"
echo "Dir::Cache::Archives \"$CACHE_APT_DIR/archives\";" > /etc/apt/apt.conf.d/99cache

# Update apt and install the collector
echo "-----> Updating package lists and installing collector"
apt-get update
apt-get install -y appsignal-collector

# Verify installation
if [ -f "/usr/bin/appsignal-collector" ]; then
  echo "-----> AppSignal collector installed successfully"
else
  echo "-----> Error: AppSignal collector installation failed"
  exit 1
fi

# Configure the collector
echo "-----> Configuring AppSignal collector"
cat << EOF > /etc/appsignal-collector.conf
# AppSignal collector configuration
# Generated by Heroku buildpack
push_api_key = "${APPSIGNAL_PUSH_API_KEY}"
EOF

# Install the runner
echo "-----> Installing AppSignal Collector runner"
mkdir -p "$BUILD_DIR/.profile.d"
cp "$BUILDPACK_DIR/extra/appsignal.sh" "$BUILD_DIR/.profile.d/"
chmod +x "$BUILD_DIR/.profile.d/appsignal.sh"

echo "-----> AppSignal collector setup complete"
echo "-----> Collector will start automatically in the background when the dyno starts"
